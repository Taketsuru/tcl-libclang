# ============================================================================
#
# Copyright (c) 2014 Taketsuru <taketsuru11@gmail.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ============================================================================

package require tcltest
namespace import tcltest::*

package require cindex
namespace import cindex::*

tcltest::testConstraint hasBistCommand \
    [::expr {"" ne [info comm ::cindex::bist]}];

#------------------------------------------------------------------------ bist

test bist-1.0 "bist" -constraints hasBistCommand -body {
    bist
}

#----------------------------------------------------------------------- setup

set setupMytu {
    set fn [file normalize [file join [file dirname [info script]] .. generic libcindex.c]];
    index myindex
    myindex translationUnit \
        -detailedPreprocessingRecord -- mytu $fn -I$::env(CLANG_BUILTIN_HEADER_INCLUDE_DIR) {*}$::env(COMPILE_FLAGS)
    set numDiag [mytu diagnostic num];
    set diagnostics {};
    for {set i 0} {$i < $numDiag} {incr i} {
	lappend diagnostics [mytu diagnostic decode $i];
    }
    if {$numDiag > 0} {
	::error [join $diagnostics \n];
    }
}

set cleanupMytu {
    rename myindex {}
}

#---------------------------------------------------------------------- cursor

test cindex_cursor-0.0 "cursor / all subcommands" \
    -setup $setupMytu \
    -cleanup $cleanupMytu \
-body {
    set root [mytu cursor]
    cursor argument $root 0
    cursor availability $root
    cursor briefCommentText $root
    cursor canonicalCursor $root
    cursor commentRange $root
    cursor cxxAccessSpecifier $root
    cursor definition $root
    cursor displayName $root
    cursor equal $root $root
    cursor extent $root
    cursor hash $root
    cursor IBOutletCollectionType $root
    cursor is attribute $root
    cursor is bitField $root
    cursor is cxxMethodPureVirtual $root
    cursor is cxxMethodStatic $root
    cursor is cxxMethodVirtual $root
    cursor is declaration $root
    cursor is definition $root
    cursor is dynamicCall $root
    cursor is unexposed $root
    cursor is expression $root
    cursor is invalid $root
    cursor is null $root
    cursor is objCOptional $root
    cursor is preprocessing $root
    cursor is reference $root
    cursor is statement $root
    cursor is translationUnit $root
    cursor is variadic $root
    cursor is virtualBase $root
    cursor includedFile $root
    cursor language $root
    cursor lexicalParent $root
    cursor linkage $root
    cursor location $root
    cursor null
    cursor numArguments $root
    cursor numOverloadedDecls $root;
    cursor objCDeclQualifiers $root
    cursor objCPropertyAttributes $root
    cursor objCSelectorIndex $root
    cursor objCTypeEncoding $root
    cursor overloadedDecl $root 0
    cursor overriddenCursors $root
    cursor platformAvailability $root
    cursor rawCommentText $root
    cursor receiverType $root
    cursor referenced $root
    cursor referenceNameRange $root 0
    cursor resultType $root
    cursor semanticParent $root
    cursor specializedTemplate $root
    cursor spelling $root
    cursor spellingNameRange $root 0
    cursor translationUnit $root
    cursor templateCursorKind $root
    cursor type $root
    cursor typedefDeclUnderlyingType $root
    cursor USR $root
    foreachChild child $root {
        switch -- [lindex $child 0] {
            EnumDecl {
                cursor enumDeclIntegerType $child
                recurse
            } EnumConstantDecl {
                cursor enumConstantDeclValue $child
            } StructDecl {
                recurse
            } FieldDecl {
                cursor fieldDeclBitWidth $child
            }
        }
    }
    return
}

#---------------------------------------------------------------- foreachChild

#----------------------------------------------------------------------- index

test index-0.0 "index / construction & destruction" -body {
    index myindex
    rename myindex {}
    return
}

test index-1.0 "index / -displayDiagnostics" -body {
    catch {exec [info nameofexecutable] [file join [tcltest::configure -testdir] testdata index-1.0.tcl]} result
    return $result
} -result "*index-1.0.c:*:*: error: expected ';' after top level declarator" -match glob

test index-1.1 "index / -excludeDeclFromPCH" -setup {
    index myindex
    set hfn [file join [tcltest::configure -testdir] testdata index-1.1.h]
    set cfn [file join [tcltest::configure -testdir] testdata index-1.1.c]
    set pchfn [file join [tcltest::configure -tmpdir] index-1.1.h.pch]
    myindex translationUnit -incomplete mytu $hfn
    mytu save $pchfn
} -body {
    # without -excludeDeclFromPCH finds the function declaration in the
    # pre-compiled header file.
    index myindex
    myindex translationUnit mytu -include-pch $pchfn $cfn
    set res "";
    foreachChild cursor [mytu cursor] {
        if {[lindex $cursor 0] eq "VarDecl"} {
            set res "The first element of index-1.1.c is a VarDecl."
        }
        break;
    }
    if {"" ne $res } { return $res; }
    # with -excludeDeclFromPCH the VarDecl in $cfn is found first.
    index -excludeDeclFromPCH myindex
    myindex translationUnit -- mytu -include-pch $pchfn $cfn
    foreachChild cursor [mytu cursor] {
        if {[lindex $cursor 0] ne "VarDecl"} {
            set res "The first element of index-1.1.c isn't a VarDecl, but [lindex $cursor 0]."
        }
        break;
    }
    if {"" ne $res } { return $res; }
} -cleanup {
    file delete $pchfn
    rename myindex {}
}

#-------------------------------------------------------------------- location

test cindex_location-0.0 "location / all subcommands" \
-setup $setupMytu \
-cleanup $cleanupMytu \
-body {
    set mylocation [cursor location [mytu cursor]]
    location equal $mylocation $mylocation
    location expansionLocation $mylocation
    location fileLocation $mylocation
    location null
    location presumedLocation $mylocation
    location spellingLocation $mylocation
    location is null $mylocation
    location is inSystemHeader $mylocation
    location is inMainFile $mylocation
    return
}

# ---------------------------------------------------------------------- range

test cindex_range-0.0 "range / all subcommands" \
-setup $setupMytu \
-cleanup $cleanupMytu \
-body {
    set myrange [cursor extent [mytu cursor]]
    set mylocation [cursor location [mytu cursor]]
    range create $mylocation $mylocation
    range end $myrange
    range equal $myrange $myrange
    range is null $myrange
    range null
    range start $myrange
    return
}

#--------------------------------------------------------------------- recurse

# ----------------------------------------------------------------------- type

test cindex_type-0.0 "type / all subcommands" \
-setup $setupMytu \
-cleanup $cleanupMytu \
-body {
    set mytype [cursor type [mytu cursor]]
    type alignof $mytype
    type argType $mytype 0
    type arrayElementType $mytype
    type arraySize $mytype
    type canonicalType $mytype
    type classType $mytype
    type cxxRefQualifier $mytype
    type declaration $mytype
    type elementType $mytype
    type equal $mytype $mytype
    type functionTypeCallingConvention $mytype
    type is constQualified $mytype
    type is functionTypeVariadic $mytype
    type is PODType $mytype
    type is restrictQualified $mytype
    type is volatileQualified $mytype
    type numArgTypes $mytype
    type numElements $mytype
    type offsetof $mytype test
    type pointeeType $mytype
    type resultType $mytype
    type sizeof $mytype
    type spelling $mytype
    return
}

#---------------------------------------------------- <index instance> options

test indexName_options-1.0 "<index instance> options / default" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options
} -result -none

test indexName_options-2.0 \
    "<index instance> options / -backgroundIndexing" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundIndexing
    myindex options
} -result -backgroundIndexing

test indexName_options-2.1 \
    "<index instance> options / -backgroundEditing" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundEditing
    myindex options
} -result -backgroundEditing

test indexName_options-3.0 "<index instance> options / -background" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -background
    myindex options
} -result -background

test indexName_options-4.0 "<index instance> options / multiple" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundIndexing -backgroundEditing
    myindex options
} -result -background

#-------------------------------------------- <index instance> translationUnit

test indexName_translationUnit-1.0 "indexName translationUnit / all options" \
-setup {
    index -displayDiagnostics myindex
} -cleanup {
    rename myindex {}; # this destruct both index & translation unit instances
} -body {
    set basedir [file join [tcltest::configure -testdir] testdata]
    myindex translationUnit \
        -cacheCompletionResults \
        -detailedPreprocessingRecord \
        -forSerialization \
        -includeBriefCommentsInCodeCompletion \
        -incomplete \
        -precompiledPreamble \
        -skipFunctionBodies \
        -sourceFile [file join $basedir indexName_translationUnit-1.0.c] \
        -unsavedFile [file join $basedir indexName_translationUnit-1.0.h] "typedef int x;\n"\
        -- mytu
}

#------------------------------------------------- <translation unit instance>

#------------------------------------------ <translation unit instance> cursor

test translationUnitNameCursor-1.0 \
    "<translation unit instance> cursor" \
-setup $setupMytu \
-cleanup $cleanupMytu \
-body {
    set root [mytu cursor]
    return [lindex $root 0]
} -result TranslationUnit

#-------------------------------------- <translation unit instance> diagnostic

#-------------------------------------- <translation unit instance> diagnostic

#------------------------ <translation unit instance> isMultipleIncludeGuarded

#---------------------------------------- <translation unit instance> location

#-------------------------------- <translation unit instance> modificationTime

#----------------------------------------- <translation unit instance> reparse

#----------------------------------- <translation unit instance> resourceUsage

#-------------------------------------------- <translation unit instance> save

#-------------------------------------- <translation unit instance> sourceFile

#---------------------------------------- <translation unit instance> uniqueID

#=============================================================================

cleanupTests

# Local Variables:
# tab-width: 8
# fill-column: 78
# mode: tcl
# indent-tabs-mode: nil
# End:
