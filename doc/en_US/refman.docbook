<?xml version='1.0'?>
<article xmlns='http://docbook.org/ns/docbook' version='5.0'>
  <title>Libclang Tcl Language Binding</title>
  <subtitle>Reference Manual</subtitle>

  <refentry>
    <refmeta>
      <refentrytitle>index</refentrytitle>
    </refmeta>

    <refnamediv>
      <refname>index</refname>
      <refpurpose>create a context for parsing translation units</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
	<command>cindex::index</command>
	<arg><option>-displayDiagnostics</option></arg>
	<arg><option>-excludeDeclFromPCH</option></arg>
	<arg choice='plain'><replaceable>indexName</replaceable></arg>
      </cmdsynopsis>
    </refsynopsisdiv>
    <refsection>
      <title>Description</title>

      <para>
	This command creates a command named
	<replaceable>indexName</replaceable>.  The created command is used to
	parse translation units.
      </para>

      <para>
	The following options are available:
	<variablelist>
	  <varlistentry>
	    <term><option>-displayDiagnostics</option></term>
	    <listitem>
	      <para>
		Print diagnostic messages generated during parsing translation
		units to the standard output.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-excludeDeclarationsFromPCH</option></term>
	    <listitem>
	      <para>
		Allow enumeration of declarations in the translation unit
		itself only.  Declarations in any precompiled headers are
		skipped.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </refsection>

    <refsection>
      <title>Examples</title>
      <para>
	Create <command>myindex</command>, parse <filename>test.c</filename>,
	and print enum declarations in it:
	<programlisting>
	  $ package require cindex
	  1.0
	  $ cindex::index myindex
	  $ myindex translationUnit mytu -I /usr/local/include test.c
	  $ cindex::foreachChild child [mytu cursor] {
	      if {[lindex $child 0] eq "enumDecl"} {
		puts "enumdecl at [cindex::location presumedLocation [cindex::cursor location]]"
	      }
            }
            enumdecl at 
            enumdecl at 
          $
	</programlisting>
      </para>
    </refsection>
  </refentry>

  <refentry>
    <refmeta>
      <refentrytitle>
	<replaceable>indexName</replaceable> options
      </refentrytitle>
    </refmeta>

    <refnamediv>
      <refname><replaceable>indexName</replaceable> options</refname>
      <refpurpose>
	get/set options associated with an index instance
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
	<command><replaceable>indexName</replaceable> options</command>
      </cmdsynopsis>
      <cmdsynopsis>
	<command><replaceable>indexName</replaceable> options</command>
	<arg choice='plain'><option>-none</option></arg>
      </cmdsynopsis>
      <cmdsynopsis>
	<command><replaceable>indexName</replaceable> options</command>
	<arg><option>-backgroundIndexing</option></arg>
	<arg><option>-backgroundEditing</option></arg>
	<arg><option>-background</option></arg>
      </cmdsynopsis>
    </refsynopsisdiv>
    <refsection>
      <title>Description</title>

      <para>
	Each instance created by <command>cindex::index</command> has a set of
	options.  The options control how translation units in the index is
	processed.  This command gets/sets the options set of
	<replaceable>indexName</replaceable>.
      </para>

      <para>There are three forms:
	<itemizedlist>
	  <listitem>
	    <cmdsynopsis>
	      <command><replaceable>indexName</replaceable> options</command>
	    </cmdsynopsis>
	    <para>
	      Return the list of options of
	      <replaceable>indexName</replaceable> if it's not empty.
	      Otherwise, return <option>-none</option>.
	    </para>
	  </listitem>
	  <listitem>
	    <cmdsynopsis>
	      <command><replaceable>indexName</replaceable> options</command>
	      <arg choice='plain'><option>-none</option></arg>
	    </cmdsynopsis>
	    <para>
	      Clear the options set of <replaceable>indexName</replaceable>
	      and return an empty string.
	    </para>
	  </listitem>
	  <listitem>
	    <cmdsynopsis>
	      <command><replaceable>indexName</replaceable> options</command>
	      <arg choice='plain' rep='repeat'>
		<option><replaceable>option</replaceable></option>
	      </arg>
	    </cmdsynopsis>
	    <para>
	      Replace the options set of <replaceable>indexName</replaceable>
	      with <option><replaceable>option</replaceable>...</option> and
	      return an empty string.
	    </para>
	    <para>
	      <option><replaceable>option</replaceable></option> is one of the
	      following:
	      <variablelist>
		<varlistentry>
		  <term><option>-background</option></term>
		  <listitem>
		    <para>
		      Run all the threads created by libclang at background
		      priority.  Setting this option is equivalent to setting
		      both <option>-backgroundEditing</option> and
		      <option>-backgroundIndexing</option>.
		    </para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term><option>-backgroundEditing</option></term>
		  <listitem>
		    <para>
		      Run threads created by libclang for editing at
		      background priority.
		    </para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term><option>-backgroundIndexing</option></term>
		  <listitem>
		    <para>
		      Run threads created by libclang for indexing at
		      background priority.
		    </para>
		  </listitem>
		</varlistentry>
	      </variablelist>
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </refsection>
    <refsection>
      <title>Examples</title>
      <para>
	Clear and get the options:
	<programlisting>
	  $ package require cindex
	  1.0
	  $ cindex::index myindex
	  $ myindex options -none
	  $ myindex options
	  -none
	  $
	</programlisting>
      </para>
      <para>
	Set and get the options:
	<programlisting>
	  $ package require cindex
	  1.0
	  $ cindex::index myindex
	  $ myindex options -backgroundEditing -backgroundIndexing
	  $ myindex options
	  -background
	</programlisting>
	Note that the last value is <option>-background</option> since setting
	both <option>-backgroundEditing</option> and
	<option>-backgroundIndexing</option> is equivalent to
	<option>-background</option>.
      </para>
    </refsection>

    <refsection>
      <title>See Also</title>
      <para>
	<citerefentry><refentrytitle>index</refentrytitle></citerefentry>
      </para>
    </refsection>
  </refentry>

  <refentry>
    <refmeta>
      <refentrytitle>
	<replaceable>indexName</replaceable> translationUnit
      </refentrytitle>
    </refmeta>

    <refnamediv>
      <refname><replaceable>indexName</replaceable> translationUnit</refname>
      <refpurpose>
	create a translation unit
      </refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
	<command><replaceable>indexName</replaceable> translationUnit</command>
	<arg><option>-cacheCompletionResults</option></arg>
	<arg><option>-detailedPreprocessingRecord</option></arg>
	<arg><option>-forSerialization</option></arg>
	<arg><option>-includeBriefCommentsInCodeCompletion</option></arg>
	<arg><option>-incomplete</option></arg>
	<arg><option>-parseLater</option></arg>
	<arg><option>-precompiledPreamble</option></arg>
	<arg><option>-skipFunctionBodies</option></arg>
	<arg>
	  <option>-sourceFile</option>
	  <replaceable>filename</replaceable>
	</arg>
	<arg>
	  <option>-unsaveFile</option>
	  <replaceable>filename</replaceable>
	  <replaceable>contents</replaceable>
	</arg>
	<arg><option>--</option></arg>
	<arg choice='plain'><replaceable>translationUnitName</replaceable></arg>
	<arg choice='plain' rep='repeat'>
	  <replaceable>compilerCommnadLineArg</replaceable>
	</arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsection>
      <title>Descriptions</title>
      <para>
	This command defines <replaceable>translationUnitName</replaceable>.
	The newly defined command is used to query properties of a translation
	unit.
      </para>

      <para>
	The main source file of the translation unit is specified in one of
	two ways:
	<itemizedlist>
	  <listitem>
	    <para>
	      By <option>-sourceFile</option>.  The file name of the main
	      source file follows the option.
	    </para>
	  </listitem>
	  <listitem>
	    <para>By a <replaceable>commandLineArg</replaceable>.  The file
	    name of the main source file is specified in the same way as
	    compiler's command line.</para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	The following options are available:
	<variablelist>
	  <varlistentry>
	    <term><option>-cacheCompletionResults</option></term>
	    <listitem>
	      <para>
		Cache code completion results.  This option adds some
		overheads to reparse operation but enhances the performance of
		code completion.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-detailedPreprocessingRecord</option></term>
	    <listitem>
	      <para>
		Record macro definitions and instantiations.  This enables
		querying such properties.  This option increases memory
		footprint and time necessary to parse the translation unit.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-forSerialization</option></term>
	    <listitem>
	      <para>
		Prepare to do <replaceable>translationUnitName</replaceable>
		<command>save</command>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-includeBriefCommentsInCodeCompletion</option></term>
	    <listitem>
	      <para>
		Include brief documentations in comments into the set of code
		completions.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-incomplete</option></term>
	    <listitem>
	      <para>
		Suppress semantic analysis performed at the end of translation
		unit.  This is useful when parsing a header file to generate
		precompiled header.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-parseLater</option></term>
	    <listitem>
	      <para>
		Don't parse the translation unit.  To parse the created
		translation unit, do
		<replaceable>translationUnitName</replaceable>
		<command>reparse</command>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><option>-precompiledPreamble</option></term>
	    <listitem>
	      <para>
		
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </refsection>
    
  </refentry>
</article>

<!--
   Local Variables:
   tab-width: 8
   fill-column: 78
   mode: nxml
   End:
-->
