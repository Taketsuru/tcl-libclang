# ============================================================================
#
# Copyright (c) 2014 Taketsuru <taketsuru11@gmail.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ============================================================================

package require tcltest
namespace import tcltest::*

package require cindex
namespace import cindex::*

#------------------------------------------------------------------------ bist

test bist-1.0 "bist" -body {
    bist
}

#----------------------------------------------------------------------- index

test index-0.0 "index / alpha omega" -body {
    index myindex
    rename myindex {}
    return
}

test index-1.0 "index / simple options 1" -body {
    catch {exec "tclsh$tcl_version" src/testdata/index-1.0.tcl} result
    return $result
} -result "src/testdata/error.c:1:9: error: expected ';' after top level declarator"

test index-1.1 "index / simple options 2" -setup {
    index myindex
    myindex translationUnit -incomplete mytu src/testdata/index-1.1.h
    mytu save src/testdata/index-1.1.h.pch
} -body {
    index -excludeDeclFromPCH myindex
    myindex translationUnit mytu \
        -include src/testdata/index-1.1.h src/testdata/index-1.1.c
    foreachChild cursor [mytu cursor] {
        if {[lindex $cursor 0] ne "VarDecl"} {
            error "The first element of index-1.1.c isn't a VarDecl."
        }
        return
    }
} -cleanup {
    file delete src/testdata/index-1.1.h.pch
    rename myindex {}
}

#---------------------------------------------------------------- index options

test index_options-1.0 "index options / default value" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options
} -result -none

test index_options-2.0 \
    "index options / set simple option -backgroundIndexing" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundIndexing
    myindex options
} -result -backgroundIndexing

test index_options-2.1 \
    "index options / set simple option -backgroundEditing" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundEditing
    myindex options
} -result -backgroundEditing

test index_options-3.0 "index options / set combined option" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -background
    myindex options
} -result -background

test index_options-4.0 "index options / set multiple options" -setup {
    index myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex options -backgroundIndexing -backgroundEditing
    myindex options
} -result -background

#--------------------------------------------------- indexName translationUnit

test indexName_translationUnit-1.0 "indexName translationUnit / all options" \
-setup {
    index -displayDiagnostics myindex
} -cleanup {
    rename myindex {}
} -body {
    myindex translationUnit \
        -cacheCompletionResults \
        -detailedPreprocessingRecord \
        -forSerialization \
        -includeBriefCommentsInCodeCompletion \
        -incomplete \
        -parseLater \
        -precompiledPreamble \
        -skipFunctionBodies \
        -sourceFile src/testdata/indexName_translationUnit-1.0.c \
        -unsavedFile src/testdata/indexName_translationUnit-1.0.h \
        	"typedef int x;\n"\
        -- mytu
}

#--------------------------------------------------------- translationUnitName

set setupMytu {
    index myindex
    myindex translationUnit -- mytu src/testdata/refman_index.c
}

set cleanupMytu {
    rename myindex {}
}

test cindex_tu-0.0 "translation unit / alpha omega" \
-setup $setupMytu \
-cleanup {
    eval $cleanupMytu
    file delete cindex.ast
} -body {
    mytu cursor
    mytu diagnostic number
    #mytu diagnostic decode 0
    #mytu diagnostic format 0
    mytu isMultipleIncludeGuarded src/testdata/refman_index.c
    mytu modificationTime src/testdata/refman_index.c
    mytu reparse
    mytu resourceUsage
    mytu save cindex.ast
    mytu sourceFile
    mytu uniqueID src/testdata/refman_index.c
    return
}

# --------------------------------------------------------------------- cursor

test cindex_cursor-0.0 "cursor / alpha omega" \
    -setup $setupMytu \
    -cleanup $cleanupMytu \
-body {
    set root [mytu cursor]
    cursor equal $root $root
    cursor hash $root
    cursor linkage $root
    cursor availability $root
    cursor language $root
    cursor translationUnit $root
    cursor semanticParent $root
    cursor lexicalParent $root
    cursor overriddenCursors $root
    cursor includedFile $root
    cursor location $root
    cursor extent $root
    cursor is declaration $root
    cursor is reference $root
    cursor is expression $root
    cursor is statement $root
    cursor is attribute $root
    cursor is invalid $root
    cursor is translationUnit $root
    cursor is preprocessing $root
    cursor is unexposed $root
    cursor type $root
    cursor typedefDeclUnderlyingType $root
    cursor numArguments $root
    cursor argument $root 0
    cursor objCTypeEncoding $root
    cursor resultType $root
    foreachChild child $root {
        switch -- [lindex $child 0] {
            EnumDecl {
                cursor enumDeclIntegerType $child
                recurse
            } EnumConstantDecl {
                cursor enumConstantDeclValue $child
            } StructDecl {
                recurse
            } FieldDecl {
                cursor fieldDeclBitWidth $child
            }
        }
    }
    return
}

# ----------------------------------------------------------------------- type

test cindex_type-0.0 "type / alpha omega" \
-setup $setupMytu \
-cleanup $setupMytu \
-body {
    set mytype [cursor type [mytu cursor]]
    type spelling $mytype
    type equal $mytype $mytype
    type canonicalType $mytype
    type pointeeType $mytype
    type resultType $mytype
    type elementType $mytype
    type arrayElementType $mytype
    type classType $mytype
    type numElements $mytype
    type arraySize $mytype
    type alignof $mytype
    type sizeof $mytype
    type is constQualified $mytype
    type is volatileQualified $mytype
    type is restrictQualified $mytype
    type is PODType $mytype
    type is functionTypeVariadic $mytype
    type declaration $mytype
    type functionTypeCallingConvention $mytype
    type numArgTypes $mytype
    type argType $mytype 0
    type offsetof $mytype test
    return
}

# ------------------------------------------------------------------- location 

test cindex_location-0.0 "location / alpha omega" \
-setup $setupMytu \
-cleanup $setupMytu \
-body {
    set mylocation [cursor location [mytu cursor]]
    location equal $mylocation $mylocation
    location expansionLocation $mylocation
    location fileLocation $mylocation
    location null
    location presumedLocation $mylocation
    location spellingLocation $mylocation
    location is null $mylocation
    location is inSystemHeader $mylocation
    location is inMainFile $mylocation
    return
}

# ---------------------------------------------------------------------- range

test cindex_range-0.0 "range / alpha omega" \
-setup $setupMytu \
-cleanup $setupMytu \
-body {
    set myrange [cursor extent [mytu cursor]]
    set mylocation [cursor location [mytu cursor]]
    range create $mylocation $mylocation
    range end $myrange
    range equal $myrange $myrange
    range is null $myrange
    range null
    range start $myrange
    return
}

#-------------------------------------------- examples in the reference manual

test refman_index-0.0 "index example #1" -body {
    index -displayDiagnostics myindex
    myindex translationUnit -- mytu src/testdata/refman_index.c
    foreachChild child [mytu cursor] {
        if {[lindex $child 0] eq "enumDecl"} {
            puts "enumdecl at [location presumedLocation [cursor location]]"
        }
    }
}


# ----------------------------------------------------------------------------

cleanupTests

# Local Variables:
# tab-width: 8
# fill-column: 78
# mode: tcl
# indent-tabs-mode: nil
# End:
